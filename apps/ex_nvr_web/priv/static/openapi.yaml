openapi: 3.0.0
info:
  title: ExNVR API
  description: Manage ExNVR via API endpoints
  version: 0.1.0
servers:
  - url: 'http://localhost:4000'
paths:
  /api/users/login:
    post:
      summary: Login user
      description: |
        Login the user into the system

        The issued access token has a validity of `2 days`.
      operationId: login
      tags:
        - User
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [username, password]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: An access token to use to authorize subsequent requests
        '400':
          $ref: "#/components/responses/BadArg"
  /api/devices:
    post:
      summary: Create device
      description: |
        Create a new device.

        Once the device is created, a pipeline will be started and will attempt to connect and 
        retrieve a stream from it.
      operationId: createDevice
      tags:
        - Device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Device name
                type:
                  type: string
                  enum: [IP]
                  description: Device type
                timezone:
                  type: string
                  description: Device timezoned
                  default: UTC
                state:
                  type: string
                  enum: ["recording", "stopped"]
                  default: recording
                  description: |
                    Initial state of the device.

                    * `recording` - The device will attempt connecting and recording videos
                    on creation
                    * `stopped` - The device will be created and will not try to connect or record
                    videos.
                ip_camera_config:
                  $ref: "#/components/schemas/IPCameraConfig"
              required: [name, type]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: "#/components/responses/BadArg"
  /api/devices/{device_id}:
    put:
      summary: Update device
      description: |
        Update device details.

        If the device config (e.g. `ip_camera_config`) is updated, the pipeline is restarted 
        to pick up the new configuration.
      operationId: updateDevice
      tags:
        - Device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Device name
                timezone:
                  type: string
                  description: Device timezoned
                  default: UTC
                state:
                  type: string
                  enum: ["recording", "stopped"]
                  default: recording
                  description: |
                    Initial state of the device.

                    * `recording` - The device will attempt connecting and recording videos
                    on creation
                    * `stopped` - The device will be created and will not try to connect or record
                    videos.
                ip_camera_config:
                  $ref: "#/components/schemas/IPCameraConfig"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: "#/components/responses/BadArg"
  /api/devices/{device_id}/recordings:
    get:
      summary: Get recordings
      description: Get all dates where there's available footages
      operationId: getRecordings
      tags:
        - Recording
      parameters:
        - $ref: '#/components/parameters/device_id'
        - name: start_date
          in: query
          required: false
          description: Filter by start date
          schema:
            type: string
            format: date-time
          example: 2023-01-15T10:00:01Z
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    start_date:
                      type: string
                      format: date-time
                      description: The start date of the run
                    end_date:
                      type: string
                      format: date-time
                      description: The end date of the run
                    active:
                      type: boolean
                      description: |
                        `true` if this an active run (still recording), `false` otherwise
        '400':
          $ref: "#/components/responses/BadArg"
  /api/devices/{device_id}/recordings/{recording_id}/blob:
    get:
      summary: Get recording blob
      description: | 
        Download the video chunk with the specified `recording id` in the specified `device`
      operationId: getRecordingBlob
      tags:
        - Recording
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/recording_id'
      responses:
        '200':
          description: Success
          content:
            video/mp4:
              schema:
                type: string
                format: binary
        '400':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The error message
  /api/devices/{device_id}/hls/index.m3u8:
    get:
      summary: Start HLS streaming
      description: | 
        Start HLS live view streaming or playback of recorded videos.

        By default, there'll be no transcoding since we currently only support H264, the stream is 
        muxed as it is into fMP4 files.

        If the device has sub stream provided, the manifest will also contain the lower resolution.

        For playback, only the high resolution stream can be provided, since we don't support storing
        sub-streams to file system.

        ## Stream Selection

        if the `stream` query parameter is provided, only the requested stream will be included in the 
        manifest. 
        
        Note that we don't do any checks on the existence of the requested stream (e.g. if you 
        request the sub stream and the device has no sub stream, then you'll get an empty manifest).
      operationId: startHlsStreaming
      tags:
        - Media Streaming
      parameters:
        - $ref: '#/components/parameters/device_id'
        - name: pos
          in: query
          description: |
            Start streaming from the given date time.

            If this `param` is provided, only high quality is enabled 
          schema:
            type: string
            format: date-time
        - name: stream
          in: query
          description: |
            Request the main/sub stream.

            `0` will return only the main stream, `1` will return only the sub-stream
          schema:
            type: integer
            minimum: 0
            maximum: 1
      responses:
        '200':
          description: Success
          content:
            application/vnd.apple.mpegurl:
              schema:
                type: string
  /api/devices/{device_id}/picture:
    get:
      summary: Get picture
      description: |
        Get a snapshot from the recorded video
      operationId: getPicture
      tags:
        - Media Streaming
      parameters:
        - $ref: '#/components/parameters/device_id'
        - name: time
          required: true
          description: Timestamp of the requested snapshot
          schema:
            type: string
            format: date-time
        - name: method
          required: false
          default: before
          description: |
            Getting a snapshot at the exact timestamp is costly, so, it can be rounded 
            to the nearest keyframe, thus, the default value is "before".

            Possible values are:
              * `before` - Get the snapshot from the nearest keyframe before the requested timestamp.
              * `precise` - Get the snapshot as near as possible from the requested timestamp.
          schema:
            type: string
            enum: [before, precise]
        - name: format
          required: false
          default: jpeg
          description: Image format
          schema:
            type: string
            enum: [jpeg, png]
      responses:
        '200':
          description: success
          content:
            image/jpeg:
              schema:
                type: string
                format: byte
            image/png:
              schema:
                type: string
                format: byte
        '400':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: opaque
  schemas:
    Device:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Device ID
        name:
          type: string
          description: Device name
        type:
          type: string
          enum: [IP]
          description: Device type
        timezone:
          type: string
        state:
          type: string
          enum: [recording, failed, stopped]
          description: Device state
        ip_camera_config:
          $ref: "#/components/schemas/IPCameraConfig"
    IPCameraConfig:
      type: object
      description: IP Camera configuration
      properties:
        stream_uri:
          type: string
          format: uri
          description: The RTSP URL where to get the video stream
        username:
          type: string
          description: Username to authenticate
        password:
          type: string
          format: password
          description: Password to authenticate
    Error:
      type: object
      properties:
        code:
          type: string
          description: A unique error code
        description:
          type: string
          description: The description of the error
        details:
          type: object
          description: Other details related to the error.
  parameters:
    device_id:
      name: device_id
      description: The id of the device
      in: path
      required: true
      schema:
        type: string
        format: uuid
      example: d0d83123-b3af-48b0-b9ea-2569179a7517
    recording_id:
      name: recording_id
      description: The filename of the recording
      in: path
      required: true
      schema:
        type: string
      example: 11236565645.mp4
  responses:
    BadArg:
      description: Bad Arguments
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
        description: Not Found
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
security:
  - bearerAuth: []