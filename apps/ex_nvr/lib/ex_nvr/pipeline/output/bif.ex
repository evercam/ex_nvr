defmodule ExNVR.Pipeline.Output.Bif do
  @moduledoc """
  A bin element that generates BIF (Base Index Frames) files.

  The file specification can be found [here](https://developer.roku.com/en-gb/docs/developer-program/media-playback/trick-mode/bif-file-creation.md)

  The file is generated by picking snapshots from the stream. To simplify the process and avoid
  consuming a lot of resources, only keyframes are picked as candidates for the generated BIF file.
  The keyframes are selected based on a provided interval.
  """

  use Membrane.Bin

  alias ExNVR.Pipeline.Output.Bif.{Archiver, KeyFrameSelector}
  alias Membrane.{FFmpeg, File, H264}

  def_options location: [
                spec: Path.t(),
                description: "The location where to save the generated BIF file"
              ],
              interval: [
                spec: Membrane.Time.t(),
                default: Membrane.Time.seconds(10),
                description: "The interval between the selected keyframes."
              ],
              image_width: [
                spec: non_neg_integer(),
                default: 320,
                description: "The width of the generated thumbnails"
              ]

  def_input_pad :input,
    demand_unit: :buffers,
    accepted_format: %H264{alignment: :au},
    availability: :always

  @impl true
  def handle_init(_ctx, options) do
    spec = [
      bin_input()
      |> child(:key_frame_filter, %KeyFrameSelector{interval: options.interval})
      |> via_in(:input, auto_demand_size: 10)
      |> child(:decoder, %H264.FFmpeg.Decoder{use_shm?: true})
      |> child(:scaler, %FFmpeg.SWScale.Scaler{output_width: options.image_width, use_shm?: true})
      |> child(:image_encoder, Turbojpeg.Filter)
      |> child(:archiver, Archiver)
      |> child(:sink, %File.Sink{location: options.location})
    ]

    {[spec: spec], %{}}
  end

  @impl true
  def handle_element_end_of_stream(:sink, _pad, _ctx, state) do
    {[notify_parent: :end_of_stream], state}
  end

  @impl true
  def handle_element_end_of_stream(_element, _pad, _ctx, state) do
    {[], state}
  end
end
