FROM debian:bullseye

ENV OTP_VERSION="27.3.3" \
    REBAR3_VERSION="3.24.0" \
    PKG_CONFIG_PATH=""

LABEL org.opencontainers.image.version=$OTP_VERSION

RUN set -xe \
        && OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz" \
        && OTP_DOWNLOAD_SHA256="1ecd443b3ba832148f4644ebc7722024b66bf1ab4fa70823c4c86f3801f50baf" \
        && fetchDeps=' \
                curl \
                ca-certificates' \
        && apt-get update \
        && apt-get install -y --no-install-recommends $fetchDeps \
        && curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" \
        && echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - \
        && runtimeDeps=' \
                libodbc1 \
                libssl1.1 \
                libsctp1 \
        ' \
        && buildDeps=' \
                autoconf \
                dpkg-dev \
                gcc \
                g++ \
                make \
                libncurses-dev \
                unixodbc-dev \
                libssl-dev \
                libsctp-dev \
        ' \
        && apt-get install -y --no-install-recommends $runtimeDeps \
        && apt-get install -y --no-install-recommends $buildDeps \
        && export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" \
        && mkdir -vp $ERL_TOP \
        && tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \
        && rm otp-src.tar.gz \
        && ( cd $ERL_TOP \
          && ./otp_build autoconf \
          && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" \
          && ./configure --build="$gnuArch" --disable-year2038 \
          && make -j$(nproc) \
          && make install ) \
        && find /usr/local -name examples | xargs rm -rf \
        && REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" \
        && REBAR3_DOWNLOAD_SHA256="391b0eaa2825bb427fef1e55a0d166493059175f57a33b00346b84a20398216c" \
        && mkdir -p /usr/src/rebar3-src \
        && curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" \
        && echo "$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz" | sha256sum -c - \
        && tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 \
        && rm rebar3-src.tar.gz \
        && cd /usr/src/rebar3-src \
        && HOME=$PWD ./bootstrap \
        && install -v ./rebar3 /usr/local/bin/ \
        && rm -rf /usr/src/rebar3-src \
        && rm -rf $ERL_TOP

# elixir expects utf8.
ENV ELIXIR_VERSION="v1.18.3" \
        LANG=C.UTF-8

RUN set -xe \
        && ELIXIR_DOWNLOAD_URL="https://github.com/elixir-lang/elixir/archive/${ELIXIR_VERSION}.tar.gz" \
        && ELIXIR_DOWNLOAD_SHA256="f8d4376311058dd9a78ed365fa1df9fd1b22d2468c587e3f0f4fb320283a1ed7" \
        && curl -fSL -o elixir-src.tar.gz $ELIXIR_DOWNLOAD_URL \
        && echo "$ELIXIR_DOWNLOAD_SHA256  elixir-src.tar.gz" | sha256sum -c - \
        && mkdir -p /usr/local/src/elixir \
        && tar -xzC /usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz \
        && rm elixir-src.tar.gz \
        && cd /usr/local/src/elixir \
        && make install clean \
        && find /usr/local/src/elixir/ -type f -not -regex "/usr/local/src/elixir/lib/[^\/]*/lib.*" -exec rm -rf {} + \
        && find /usr/local/src/elixir/ -type d -depth -empty -delete

# install build dependencies
RUN apt-get install -y \
  && mkdir -p /etc/apt/keyrings \
  && apt-get install -y curl gpg \
  && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
  && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
  && apt-get update \
  && apt-get install -y \
  wget \
  libssl-dev \
  xz-utils \
  nodejs \
  git \
  make \
  cmake \
  libsrtp2-dev \
  libturbojpeg-dev \ 
  && rm -rf /var/lib/apt/lists/*

# Download ffmpeg
RUN wget https://a7u4.c16.e2-3.dev/public/ffmpeg-armhf.tar.xz && tar -xf ffmpeg-armhf.tar.xz -C /opt
ENV PKG_CONFIG_PATH="/opt/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH"

ARG ERL_FLAGS
ENV ERL_FLAGS=$ERL_FLAGS
ENV MIX_ENV=prod
ENV GENERATE_DEB_PACKAGE=true

# Create build workdir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
  mix local.rebar --force

# install mix dependencies
COPY rtsp rtsp
COPY ui ui

WORKDIR /app/ui

RUN rm -rf priv/bundlex assets/node_modules

RUN mix deps.get
RUN mix deps.compile

RUN mix sentry.package_source_code
RUN mix release

RUN mkdir build-assets
RUN cp _build/prod/*.tar.gz _build/prod/*.deb build-assets/